// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.Resistance2019.subsystems;


import org.usfirst.frc2619.Resistance2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
    import com.ctre.phoenix.motorcontrol.ControlMode;


/**
 *
 */
public class Intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX centeringRoller;
    private WPI_TalonSRX feedRoller;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final static double SPEED_P_CONSTANT = 1.0E-6;
	private final static double SPEED_I_CONSTANT = 1.0E-6;
	private final static double SPEED_D_CONSTANT = 0.0;
	private final static double SPEED_F_CONSTANT = 0.0;
    
    public double speedP = SPEED_P_CONSTANT;
	public double speedI = SPEED_I_CONSTANT;
	public double speedD = SPEED_D_CONSTANT;
    public double speedF = SPEED_F_CONSTANT;
    
    public final static int CONSTANT_SLOT_SPEED_MODE = 1;
    
    public double CENTER_INWARD_MULTIPLIER = 1;
    public double FEED_INWARD_MULTIPLIER = 1;
    public double CENTER_OUTWARD_MULTIPLIER = 1;
    public double FEED_OUTWARD_MULTIPLIER = 1;

    private final int TIMEOUT_MS = 10;
    private static final int MAX_TICKS_PER_SEC = 270000;

    public Intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        centeringRoller = new WPI_TalonSRX(6);
        
        
        
        feedRoller = new WPI_TalonSRX(7);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // TODO: Are we using this method?
    public void run(double power){
        if (power < 0){
            centeringRoller.set(power*CENTER_OUTWARD_MULTIPLIER);
            feedRoller.set(power*CENTER_OUTWARD_MULTIPLIER);  
        }
        else{
            centeringRoller.set(power*CENTER_INWARD_MULTIPLIER);
            feedRoller.set(power*CENTER_INWARD_MULTIPLIER);  
        }
    }

    
    public void stop(){
        centeringRoller.set(0);
        feedRoller.set
    }

    public void initSpeedMode() {    	
    	centeringRoller.set(ControlMode.Velocity, 0);
    	feedRoller.set(ControlMode.Velocity, 0);
        
        // TODO: Move 1 to constant up top (PID slot)
        // Based on the selectProfileSlot below, I believe you want to use `CONSTANT_SLOT_SPEED_MODE`
    	centeringRoller.config_kP(1, speedP, TIMEOUT_MS);
    	centeringRoller.config_kI(1, speedI, TIMEOUT_MS);
    	centeringRoller.config_kD(1, speedD, TIMEOUT_MS);
    	centeringRoller.config_kF(1, speedF, TIMEOUT_MS);

    	feedRoller.config_kP(1, speedP, TIMEOUT_MS);
    	feedRoller.config_kI(1, speedI, TIMEOUT_MS);
    	feedRoller.config_kD(1, speedD, TIMEOUT_MS);
    	feedRoller.config_kF(1, speedF, TIMEOUT_MS);
    	
    	centeringRoller.selectProfileSlot(CONSTANT_SLOT_SPEED_MODE, 0);
    	feedRoller.selectProfileSlot(CONSTANT_SLOT_SPEED_MODE, 0);
    }

    // TODO: Rename `setSpeed` or the method so it's clear that it's a % speed
    public void setSpeedPID(double setSpeed) {
        // TODO: Cap setSpeed to [-1.0 - 1.0] 
		centeringRoller.set(ControlMode.Velocity, MAX_TICKS_PER_SEC * setSpeed);
		feedRoller.set(ControlMode.Velocity, MAX_TICKS_PER_SEC * setSpeed);
	}
}

