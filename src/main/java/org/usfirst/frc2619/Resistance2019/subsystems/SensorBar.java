// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.Resistance2019.subsystems;


import org.usfirst.frc2619.Resistance2019.Robot;
import org.usfirst.frc2619.Resistance2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class SensorBar extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DigitalInput sensorFarLeft;
    private DigitalInput sensorLeft;
    private DigitalInput sensorMiddle;
    private DigitalInput sensorRight;
    private DigitalInput sensorFarRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final int NUM_SENSORS = 5;

    
    public DigitalInput[] sensBar = new DigitalInput[5];

    public SensorBar() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        sensorFarLeft = new DigitalInput(0);
        addChild("SensorFarLeft",sensorFarLeft);
        
        
        sensorLeft = new DigitalInput(1);
        addChild("SensorLeft",sensorLeft);
        
        
        sensorMiddle = new DigitalInput(2);
        addChild("SensorMiddle",sensorMiddle);
        
        
        sensorRight = new DigitalInput(3);
        addChild("SensorRight",sensorRight);
        
        
        sensorFarRight = new DigitalInput(4);
        addChild("SensorFarRight",sensorFarRight);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        sensBar[0] = sensorFarLeft;
        sensBar[1] = sensorLeft;
        sensBar[2] = sensorMiddle;
        sensBar[3] = sensorRight;
        sensBar[4] = sensorFarRight;
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        if (isOneSensed()){
            Robot.indicatorLights.lightOn();
        }
        else{
            Robot.indicatorLights.lightOff();
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public DigitalInput getSensor(int sensor){
        return sensBar[sensor];
    }

    public boolean isOneSensed(){
        boolean seesLine = false;
        for(int x = 0; x < NUM_SENSORS; x++){
            if(isSensorTriggered(x) == true){
                seesLine = true;
                x = NUM_SENSORS;
            }
        }
        SmartDashboard.putBoolean("Sensors", seesLine);
        return seesLine;
    }

    public boolean isSensorTriggered(int idx)
    {
        if (idx == 0 || idx == 4) return !sensBar[idx].get();
        else return sensBar[idx].get();
    }
}

