// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.Resistance2019.subsystems;


import org.usfirst.frc2619.Resistance2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Hatchers extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX windowMotor;
    private DoubleSolenoid doubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean isUp;
    private boolean isGrabbed;

    public Hatchers() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        windowMotor = new WPI_TalonSRX(13);
        
        
        
        doubleSolenoid = new DoubleSolenoid(0, 0, 1);
        addChild("DoubleSolenoid",doubleSolenoid);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        isUp = true;
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void HatchIt()
    {
        doubleSolenoid.set(DoubleSolenoid.Value.kForward);    
        isGrabbed = true;
    }
    public void UnHatchIt()
    {
        doubleSolenoid.set(DoubleSolenoid.Value.kReverse);      
        isGrabbed = false;
    }
    public void Move()
    {
        if (isUp) {
            windowMotor.set(ControlMode.PercentOutput, -0.5);
            isUp = false;
        }
        else
        {
            windowMotor.set(ControlMode.PercentOutput, 0.5);
            isUp = true;
        }
    }
    public void HatchUp()
    {
        if (!isUp)
        {
            windowMotor.set(ControlMode.PercentOutput, 0.5);
            isUp = true;
        }
    }
    public void HatchDown()
    {
        if (isUp) {
            windowMotor.set(ControlMode.PercentOutput, -0.5);
            isUp = false;
        }
    }

    public boolean checkLimitSwitches()
    {
        if (windowMotor.getSensorCollection().isFwdLimitSwitchClosed() || windowMotor.getSensorCollection().isRevLimitSwitchClosed() ){
    		return true;
        }
        return false;
    }

    public boolean checkTopLimitSwitch()
    {
        if (windowMotor.getSensorCollection().isFwdLimitSwitchClosed()){
    		return true;
        }
        return false;
    }

    public boolean checkBottomLimitSwitch()
    {
        if (windowMotor.getSensorCollection().isRevLimitSwitchClosed()){
    		return true;
        }
        return false;
    }

    public void stop()
    {
        windowMotor.set(ControlMode.PercentOutput, 0);
    }

    public boolean isUp(){
        return isUp;
    }

    public boolean isGrabberOut(){
        if (doubleSolenoid.get().equals(DoubleSolenoid.Value.kForward)){
            return true;
        }
        else{
            return false;
        }
    }
    
}

