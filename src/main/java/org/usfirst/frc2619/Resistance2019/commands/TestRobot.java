// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.Resistance2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2619.Resistance2019.Robot;
/**
 *
 */
public class TestRobot extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    public int state;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TestRobot() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        state = 0;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if(state == 0){
            Robot.driveTrain.run(.1, 0);
            this.setTimeout(2);
            state = 1;
        }
        else if(state == 1 && isTimedOut()){
            Robot.driveTrain.run(0, .1);
            this.setTimeout(2);
            state = 2;
        }
        else if(state == 2 && isTimedOut()){
            Robot.driveTrain.run(-.1, 0);
            this.setTimeout(2);
            state = 3;
        }
        else if(state == 3 && isTimedOut()){
            Robot.driveTrain.run(0, -.1);
            this.setTimeout(2);
            state = 4;
        }
        else if (state == 4 && isTimedOut()){
            Robot.intake.setPercentSpeed(.1);
            this.setTimeout(2);
            state = 5;
        }
        else if (state == 5 && isTimedOut()){
            Robot.intake.setPercentSpeed(-.1);
            this.setTimeout(2);
            state = 6;
        }
        else if (state == 6 && isTimedOut()){
            Robot.extension.extend();
            this.setTimeout(2);
            state = 7;
        }
        else if (state == 7 && isTimedOut()){
            Robot.extension.retract();
            this.setTimeout(2);
            state = 8;
        }
        else if(state == 8 && isTimedOut()){
            
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
