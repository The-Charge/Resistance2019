// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.Resistance2019.commands;

import edu.wpi.first.networktables.EntryListenerFlags;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.networktables.NetworkTableValue;
import edu.wpi.first.wpilibj.command.CommandGroup;
import org.usfirst.frc2619.Resistance2019.subsystems.*;

/**
 *
 */
public class GoToVisionTarget extends CommandGroup {

   Object visionData;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public GoToVisionTarget() {
    
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    
        double time = 0, distance = 0, angle1 = 0, angle2 = 0, timeToRun = 0;
        boolean success = false;

        NetworkTableInstance inst = NetworkTableInstance.getDefault();
        NetworkTable table = inst.getTable("Root/Vision");

        NetworkTableEntry visionSuccess = table.getEntry("success");
        success = visionSuccess.getBoolean(false);
        
        if(success) {
            NetworkTableEntry visionTime = table.getEntry("time");
            NetworkTableEntry visionDistance = table.getEntry("distance");
            NetworkTableEntry visionAngle1 = table.getEntry("angle1");
            NetworkTableEntry visionAngle2 = table.getEntry("angle2");
            NetworkTableEntry visionTimeToRun = table.getEntry("timeToRun"); //only for debugging

            time = visionTime.getDouble(-1);
            distance = visionDistance.getDouble(-1);
            angle1 = visionAngle1.getDouble(-1000); //need to get angle value range from Evan
            angle2 = visionAngle2.getDouble(-1000); //same problem as angle1
            timeToRun = visionTimeToRun.getDouble(-1);
        }
        else {
            //TELL DRIVER THE VISION FAILED TO FIND A TARGET
        }

        if(success) {
            //Method #1: Drive, Turn, Drive
            double turnAngle = Math.abs(angle1) + Math.abs(angle2); // will need to be modified based on angle measurement
            double angle3 = 180 - Math.abs(turnAngle);
            double firstDist = distance * (Math.sin(angle2) / Math.sin(angle3));
            double secondDist = distance * (Math.sin(angle1) / Math.sin(angle3));

            addSequential(new DriveXFeetMotionMagic(firstDist, 0, 0));
            addSequential(new TurnNDegreesAbsolutePID(DriveTrain.getGyroPID() + turnAngle));
            addSequential(new DriveXFeetMotionMagic(secondDist, 0, 0));
        }

        // Add Commands here:""
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        
    } 
}
