// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.Resistance2019;

import org.usfirst.frc2619.Resistance2019.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton overrideUpElevatorBtn;
    public JoystickButton overrideDownElevatorBtn;
    public JoystickButton shootBallBtn;
    public JoystickButton elevateMidRocketBtn;
    public JoystickButton elevateCargoShipBtn;
    public JoystickButton reverseIntakeBtn;
    public JoystickButton collectBtn;
    public JoystickButton resetCollectBtn;
    public JoystickButton lanceInBtn;
    public JoystickButton elevateMidHatchBtn;
    public JoystickButton elevatehighHatchBtn;
    public JoystickButton hatchCollectCofigBtn;
    public JoystickButton toggleHatchMotorBtn;
    public JoystickButton toggleHatchSolenoidBtn;
    public Joystick buttonBox;
    public JoystickButton lockStraightBtn;
    public JoystickButton lineFollowBtn;
    public JoystickButton climbBtn;
    public JoystickButton reverseClimbBtn;
    public JoystickButton slowReverseClimbBtn;
    public JoystickButton orientBtn;
    public JoystickButton helpClimbBtn;
    public JoystickButton retractClimbBtn;
    public JoystickButton reverseLanceBtn;
    public JoystickButton lanceRetractBtn;
    public Joystick leftJoystick;
    public JoystickButton quarterSpeedBtn;
    public JoystickButton halfSpeedBtn;
    public JoystickButton invertDriveBtn;
    public JoystickButton shiftLowBtn;
    public JoystickButton shiftHighBtn;
    public JoystickButton shiftLowHeldBtn;
    public JoystickButton shiftHighReleasedBtn;
    public JoystickButton tankDriveBtn;
    public Joystick rightJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightJoystick = new Joystick(1);
        
        tankDriveBtn = new JoystickButton(rightJoystick, 12);
        tankDriveBtn.whenPressed(new TankDrive());
        shiftHighReleasedBtn = new JoystickButton(rightJoystick, 1);
        shiftHighReleasedBtn.whenReleased(new ShiftHigh());
        shiftLowHeldBtn = new JoystickButton(rightJoystick, 1);
        shiftLowHeldBtn.whileHeld(new ShiftLow());
        shiftHighBtn = new JoystickButton(rightJoystick, 5);
        shiftHighBtn.whenPressed(new ShiftHigh());
        shiftLowBtn = new JoystickButton(rightJoystick, 3);
        shiftLowBtn.whenPressed(new ShiftLow());
        invertDriveBtn = new JoystickButton(rightJoystick, 2);
        invertDriveBtn.whenPressed(new InvertDrive());
        halfSpeedBtn = new JoystickButton(rightJoystick, 6);
        halfSpeedBtn.whileHeld(new HalfSpeed());
        quarterSpeedBtn = new JoystickButton(rightJoystick, 4);
        quarterSpeedBtn.whileHeld(new QuarterSpeed());
        leftJoystick = new Joystick(0);
        
        lanceRetractBtn = new JoystickButton(leftJoystick, 7);
        lanceRetractBtn.whenReleased(new Retract());
        reverseLanceBtn = new JoystickButton(leftJoystick, 7);
        reverseLanceBtn.whileHeld(new ReverseLance());
        retractClimbBtn = new JoystickButton(leftJoystick, 10);
        retractClimbBtn.whenPressed(new RetractClimb());
        helpClimbBtn = new JoystickButton(leftJoystick, 9);
        helpClimbBtn.whenPressed(new HelpClimb());
        orientBtn = new JoystickButton(leftJoystick, 3);
        orientBtn.whenPressed(new Orient(0));
        slowReverseClimbBtn = new JoystickButton(leftJoystick, 10);
        slowReverseClimbBtn.whileHeld(new Climb(0.2));
        reverseClimbBtn = new JoystickButton(leftJoystick, 12);
        reverseClimbBtn.whileHeld(new Climb(1));
        climbBtn = new JoystickButton(leftJoystick, 11);
        climbBtn.whileHeld(new Climb(-1.0));
        lineFollowBtn = new JoystickButton(leftJoystick, 1);
        lineFollowBtn.whileHeld(new PIDLineFollow());
        lockStraightBtn = new JoystickButton(leftJoystick, 4);
        lockStraightBtn.whileHeld(new LockStraight());
        buttonBox = new Joystick(2);
        
        toggleHatchSolenoidBtn = new JoystickButton(buttonBox, 6);
        toggleHatchSolenoidBtn.whenPressed(new ToggleHatcherSolenoid());
        toggleHatchMotorBtn = new JoystickButton(buttonBox, 4);
        toggleHatchMotorBtn.whenPressed(new RunHatchMotor());
        hatchCollectCofigBtn = new JoystickButton(buttonBox, 12);
        hatchCollectCofigBtn.whenPressed(new GetHatchConfig());
        elevatehighHatchBtn = new JoystickButton(buttonBox, 8);
        elevatehighHatchBtn.whenPressed(new TopHatchConfig());
        elevateMidHatchBtn = new JoystickButton(buttonBox, 10);
        elevateMidHatchBtn.whenPressed(new MidHatchConfig());
        lanceInBtn = new JoystickButton(buttonBox, 11);
        lanceInBtn.whenReleased(new Retract());
        resetCollectBtn = new JoystickButton(buttonBox, 2);
        resetCollectBtn.whenReleased(new ResetCollect());
        collectBtn = new JoystickButton(buttonBox, 2);
        collectBtn.whileHeld(new CollectCargo());
        reverseIntakeBtn = new JoystickButton(buttonBox, 11);
        reverseIntakeBtn.whileHeld(new LanceManual());
        elevateCargoShipBtn = new JoystickButton(buttonBox, 9);
        elevateCargoShipBtn.whenPressed(new ElevateCargoship());
        elevateMidRocketBtn = new JoystickButton(buttonBox, 7);
        elevateMidRocketBtn.whenPressed(new ElevateMidRocket());
        shootBallBtn = new JoystickButton(buttonBox, 1);
        shootBallBtn.whileHeld(new RunShooter(0.4));
        overrideDownElevatorBtn = new JoystickButton(buttonBox, 3);
        overrideDownElevatorBtn.whileHeld(new OverrideElevator(-0.3));
        overrideUpElevatorBtn = new JoystickButton(buttonBox, 5);
        overrideUpElevatorBtn.whileHeld(new OverrideElevator(0.5));


        // SmartDashboard Buttons
        SmartDashboard.putData("HelpClimb", new HelpClimb());
        SmartDashboard.putData("RetractClimb", new RetractClimb());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getButtonBox() {
        return buttonBox;
    }

    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

